{"version":3,"sources":["components/Search.js","components/modals/VideoModal.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["ImgComp","props","state","value","getSearch","bind","handleChange","e","params","part","q","this","type","key","keyCode","axios","get","then","response","callback","data","items","setState","target","className","id","onSubmit","preventDefault","TextField","placeholder","margin","variant","onKeyDown","onChange","React","Component","VideoModal","Modal","show","isOpen","centered","onHide","isHide","Header","closeButton","iframeVideo","src","frameBorder","width","height","List","isModalOpen","activeModal","passVideoId","hideModal","index","videos","map","video","videoId","onClick","snippet","thumbnails","high","url","alt","title","publishedAt","substring","description","href","rel","App","allVideos","Search","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.25debb07.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../assets/css/SearchBar.css\";\nimport { TextField } from \"@material-ui/core\";\nimport axios from \"axios\";\n\nclass ImgComp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: \"\"\n    };\n    this.getSearch = this.getSearch.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  getSearch(e) {\n    const params = {\n      part: \"snippet\",\n      q: this.state.value,\n      type: \"video\",\n      key: \"AIzaSyDer_xlI4-O4qjoZqdPMM0bici3m-R8zOg\"\n    };\n    if (e.keyCode === 13) {\n      axios\n        .get(\"https://www.googleapis.com/youtube/v3/search\", { params })\n        .then(response => {\n          this.props.callback(response.data.items);\n        });\n    }\n  }\n\n  handleChange(e) {\n    this.setState({ value: e.target.value });\n  }\n\n  render() {\n    return (\n      <div className=\"Search-Bar\">\n        <div id=\"wrapper\">\n          <form\n            onSubmit={e => {\n              e.preventDefault();\n            }}\n          >\n            <TextField\n              className=\"Input-field\"\n              id=\"outlined-basic\"\n              placeholder=\"Search...\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              type=\"text\"\n              value={this.state.value}\n              onKeyDown={this.getSearch}\n              onChange={this.handleChange}\n            />\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ImgComp;\n","import React, { Component } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport \"../../assets/css/VideoModal.css\";\n\nexport default class VideoModal extends Component {\n  render() {\n    return (\n      <Modal\n        className=\"Modal-Container\"\n        show={this.props.isOpen}\n        centered\n        onHide={this.props.isHide}\n      >\n        <Modal.Header closeButton></Modal.Header>\n        <iframe\n          key={this.props.iframeVideo}\n          src={`https://www.youtube.com/embed/${this.props.iframeVideo}`}\n          frameBorder=\"0\"\n          width=\"600\"\n          height=\"400\"\n        />\n      </Modal>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"../assets/css/List.css\";\nimport VideoModal from \"../components/modals/VideoModal.js\";\n\nexport default class List extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      iframeVideo: null,\n      isModalOpen: false,\n      activeModal: null\n    };\n\n    this.passVideoId = this.passVideoId.bind(this);\n    this.hideModal = this.hideModal.bind(this);\n  }\n  passVideoId(id, index) {\n    this.setState({ iframeVideo: id });\n    this.setState({ activeModal: index });\n  }\n  hideModal() {\n    this.setState({ activeModal: null });\n  }\n  render() {\n    return this.props.videos.map((video, index) => (\n      <div key={video.id.videoId} className=\"list-item\">\n        <div\n          className=\"img-block\"\n          onClick={() => this.passVideoId(video.id.videoId, index)}\n        >\n          <img src={video.snippet.thumbnails.high.url} alt=\"video\" />\n        </div>\n        <div className=\"modal-block\">\n          <VideoModal\n            isOpen={this.state.activeModal === index}\n            isHide={this.hideModal}\n            iframeVideo={this.state.iframeVideo}\n          ></VideoModal>\n        </div>\n        <div className=\"body-block\">\n          <div className=\"title\">\n            <h3> {video.snippet.title} </h3>\n          </div>\n          <div className=\"publish-date\">\n            {video.snippet.publishedAt.substring(0, 10)}\n          </div>\n          <div className=\"description\">{video.snippet.description}</div>\n          <div className=\"button\">\n            <a\n              href={\"https://www.youtube.com/watch?v=\" + video.id.videoId}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Go and watch\n            </a>\n          </div>\n        </div>\n      </div>\n    ));\n  }\n}\n","import React, { Component } from \"react\";\nimport Search from \"./components/Search\";\nimport \"./assets/css/App.css\";\nimport List from \"./components/List\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      videos: []\n    };\n\n    this.getSearch = this.getSearch.bind(this);\n  }\n\n  getSearch = allVideos => {\n    this.setState({\n      videos: allVideos\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"app-container\">\n        <div className=\"header-block\">\n          <Search callback={this.getSearch} />\n        </div>\n        <div className=\"list-block container\">\n          <List videos={this.state.videos} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}